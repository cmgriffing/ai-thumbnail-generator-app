import Head from "next/head";
import { useEffect, useState } from "react";
import { clsx } from "clsx";
import { useRouter } from "next/router";
import Case from "case";

export default function Home() {
  const router = useRouter();
  const [title, setTitle] = useState("");
  const [description, setDescription] = useState("");
  const [formIsInvalid, setFormIsInvalid] = useState(true);
  const [isSubmitting, setIsSubmitting] = useState(false);

  useEffect(() => {
    setFormIsInvalid(
      !title || !description || title.length > 100 || description.length > 1000
    );
  }, [title, description]);

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <h1 className="text-[32px] leading-[43px] font-bold mb-2">
        Generate Thumbnails
      </h1>
      <p>
        Need a thumbnail for your YouTube video? You're in luck! Our humble AI
        thumbnail farmers serve up fresh & engaging thumbnails on demandâ€”give it
        a go!
      </p>

      <hr className="my-8 border-[#9a9a9a]" />

      <form
        className="w-full mx-auto mb-4"
        method="POST"
        action="/api/create"
        onSubmit={async (event) => {
          event.preventDefault();
          if (!formIsInvalid) {
            // send request to backend
            const response = await fetch("/api/image/create", {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
              },
              body: JSON.stringify({
                title,
                description,
              }),
            });

            const { image } = await response.json();

            const dasherizedTitle = encodeURIComponent(Case.kebab(image.title));

            if (image) {
              router.push(`/images/${image.id}/${dasherizedTitle}`);
            }
          }
        }}
      >
        <div className="form-control w-full mb-4">
          <h2 className="mb-2 font-bold text-2xl">Title</h2>
          <label className="mb-4">
            <span className="label-text">What is the title of the video?</span>
          </label>
          <input
            type="text"
            value={title}
            placeholder="How I made the best banana cake ever!"
            className="input input-bordered w-full bg-transparent custom-border custom-border-radius"
            onInput={(event) => {
              setTitle(event.currentTarget.value);
            }}
          />
          <div className="text-right">
            <span className="label-text-alt">
              <span
                className={clsx(
                  {
                    "text-red": title.length > 100,
                  },
                  "mr-2",
                  "label-text-alt"
                )}
              >
                {title.length}
              </span>
              / 100
            </span>
          </div>
        </div>
        <div className="form-control mb-4">
          <h2 className="mb-2 font-bold text-2xl">Description</h2>
          <label className="mb-4">
            <span className="label-text">
              Description of contents in desired thumbnail
            </span>
          </label>
          <textarea
            value={description}
            className="textarea textarea-bordered h-24 bg-transparent custom-border custom-border-radius"
            placeholder="A Mr Beast style thumbnail with a large sack of potatoes in the top left corner..."
            onInput={(event) => {
              setDescription(event.currentTarget.value);
            }}
          ></textarea>
          <div className="text-right">
            <span className="label-text-alt">
              <span
                className={clsx(
                  {
                    "text-red": description.length > 1000,
                  },
                  "mr-2",
                  "label-text-alt"
                )}
              >
                {description.length}
              </span>
              / 1000
            </span>
          </div>
        </div>

        <button
          className={clsx("btn btn-success w-full", {
            "pointer-events-none": isSubmitting || formIsInvalid,
            "opacity-50": isSubmitting || formIsInvalid,
          })}
        >
          {!isSubmitting && (
            <span className="text-white flex flex-row">
              Generate
              <img src="/carets.svg" className="ml-[12px]" />
            </span>
          )}

          {isSubmitting && <span className="text-white">Submitting...</span>}
        </button>
      </form>
    </>
  );
}
